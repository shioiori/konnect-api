// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UTCClassSupport.API.Infrustructure.Data;

#nullable disable

namespace Konnect.API.Migrations
{
    [DbContext(typeof(EFContext))]
    partial class EFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("roleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("loginProvider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("providerKey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("providerDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("userId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("userId");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("roleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("userId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("loginProvider");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Bulletin", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("id");

                    b.Property<int>("Approved")
                        .HasColumnType("int")
                        .HasColumnName("approved");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("groupId");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("lastModifiedBy");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Bulletins");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("postId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("category");

                    b.Property<int?>("Credit")
                        .HasColumnType("int")
                        .HasColumnName("credit");

                    b.Property<int?>("Day")
                        .HasColumnType("int")
                        .HasColumnName("day");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime")
                        .HasColumnName("from");

                    b.Property<bool>("IsLoopPerDay")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isLoopPerDay");

                    b.Property<string>("Location")
                        .HasColumnType("longtext")
                        .HasColumnName("location");

                    b.Property<TimeSpan?>("PeriodEnd")
                        .HasColumnType("time")
                        .HasColumnName("periodEnd");

                    b.Property<TimeSpan?>("PeriodStart")
                        .HasColumnType("time")
                        .HasColumnName("periodStart");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext")
                        .HasColumnName("subject");

                    b.Property<string>("SubjectClass")
                        .HasColumnType("longtext")
                        .HasColumnName("subjectClass");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("longtext")
                        .HasColumnName("subjectCode");

                    b.Property<string>("TimetableId")
                        .IsRequired()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("timetableId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime")
                        .HasColumnName("to");

                    b.HasKey("Id");

                    b.HasIndex("TimetableId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("id");

                    b.Property<bool>("AllowInvite")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allowInvite");

                    b.Property<bool>("AllowOut")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allowOut");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("action");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("groupId");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isSeen");

                    b.Property<string>("ObjectId")
                        .HasColumnType("longtext")
                        .HasColumnName("objectId");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("range");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Timetable", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("groupId");

                    b.Property<bool>("IsSynchronize")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isSynchronize");

                    b.Property<int>("Remind")
                        .HasColumnType("int")
                        .HasColumnName("remind");

                    b.Property<string>("Url")
                        .HasColumnType("longtext")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("accessFailedCount");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrencyStamp");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("displayName");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("emailConfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("lockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedUserName");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("securityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("twoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("userName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.UserGroupRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("userId");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("groupId");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("roleId");

                    b.HasKey("UserId", "GroupId", "RoleId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserGroupRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("UTCClassSupport.API.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UTCClassSupport.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UTCClassSupport.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("UTCClassSupport.API.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UTCClassSupport.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UTCClassSupport.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Bulletin", b =>
                {
                    b.HasOne("UTCClassSupport.API.Models.Group", "Group")
                        .WithMany("Bulletins")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Comment", b =>
                {
                    b.HasOne("UTCClassSupport.API.Models.Bulletin", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Event", b =>
                {
                    b.HasOne("UTCClassSupport.API.Models.Timetable", "Timetable")
                        .WithMany("Shifts")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Notification", b =>
                {
                    b.HasOne("UTCClassSupport.API.Models.Group", "Group")
                        .WithMany("Notifications")
                        .HasForeignKey("GroupId");

                    b.HasOne("UTCClassSupport.API.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.UserGroupRole", b =>
                {
                    b.HasOne("UTCClassSupport.API.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UTCClassSupport.API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UTCClassSupport.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Bulletin", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Group", b =>
                {
                    b.Navigation("Bulletins");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.Timetable", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("UTCClassSupport.API.Models.User", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
